#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class RESCODE(object):
    _200 = 200
    _500 = 500
    _400 = 400

    _VALUES_TO_NAMES = {
        200: "_200",
        500: "_500",
        400: "_400",
    }

    _NAMES_TO_VALUES = {
        "_200": 200,
        "_500": 500,
        "_400": 400,
    }


class EXCCODE(object):
    PARAMNOTFOUND = 2001
    SERVICENOTFOUND = 2002

    _VALUES_TO_NAMES = {
        2001: "PARAMNOTFOUND",
        2002: "SERVICENOTFOUND",
    }

    _NAMES_TO_VALUES = {
        "PARAMNOTFOUND": 2001,
        "SERVICENOTFOUND": 2002,
    }


class Request(object):
    """
    Attributes:
     - paramJSON
     - serviceName
     - operation
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'paramJSON', 'BINARY', None, ),  # 1
        (2, TType.STRING, 'serviceName', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'operation', 'UTF8', None, ),  # 3
    )

    def __init__(self, paramJSON=None, serviceName=None, operation=None,):
        self.paramJSON = paramJSON
        self.serviceName = serviceName
        self.operation = operation

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.paramJSON = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.serviceName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.operation = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Request')
        if self.paramJSON is not None:
            oprot.writeFieldBegin('paramJSON', TType.STRING, 1)
            oprot.writeBinary(self.paramJSON)
            oprot.writeFieldEnd()
        if self.serviceName is not None:
            oprot.writeFieldBegin('serviceName', TType.STRING, 2)
            oprot.writeString(self.serviceName.encode('utf-8') if sys.version_info[0] == 2 else self.serviceName)
            oprot.writeFieldEnd()
        if self.operation is not None:
            oprot.writeFieldBegin('operation', TType.STRING, 3)
            oprot.writeString(self.operation.encode('utf-8') if sys.version_info[0] == 2 else self.operation)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.paramJSON is None:
            raise TProtocolException(message='Required field paramJSON is unset!')
        if self.serviceName is None:
            raise TProtocolException(message='Required field serviceName is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Response(object):
    """
    Attributes:
     - responeCode
     - responseJSON
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'responeCode', None, None, ),  # 1
        (2, TType.STRING, 'responseJSON', 'BINARY', None, ),  # 2
    )

    def __init__(self, responeCode=None, responseJSON=None,):
        self.responeCode = responeCode
        self.responseJSON = responseJSON

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.responeCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.responseJSON = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Response')
        if self.responeCode is not None:
            oprot.writeFieldBegin('responeCode', TType.I32, 1)
            oprot.writeI32(self.responeCode)
            oprot.writeFieldEnd()
        if self.responseJSON is not None:
            oprot.writeFieldBegin('responseJSON', TType.STRING, 2)
            oprot.writeBinary(self.responseJSON)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.responeCode is None:
            raise TProtocolException(message='Required field responeCode is unset!')
        if self.responseJSON is None:
            raise TProtocolException(message='Required field responseJSON is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ServiceException(TException):
    """
    Attributes:
     - exceptionCode
     - exceptionMess
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'exceptionCode', None, None, ),  # 1
        (2, TType.STRING, 'exceptionMess', 'UTF8', None, ),  # 2
    )

    def __init__(self, exceptionCode=None, exceptionMess=None,):
        self.exceptionCode = exceptionCode
        self.exceptionMess = exceptionMess

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.exceptionCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.exceptionMess = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ServiceException')
        if self.exceptionCode is not None:
            oprot.writeFieldBegin('exceptionCode', TType.I32, 1)
            oprot.writeI32(self.exceptionCode)
            oprot.writeFieldEnd()
        if self.exceptionMess is not None:
            oprot.writeFieldBegin('exceptionMess', TType.STRING, 2)
            oprot.writeString(self.exceptionMess.encode('utf-8') if sys.version_info[0] == 2 else self.exceptionMess)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.exceptionCode is None:
            raise TProtocolException(message='Required field exceptionCode is unset!')
        if self.exceptionMess is None:
            raise TProtocolException(message='Required field exceptionMess is unset!')
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
